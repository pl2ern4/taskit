{"version":3,"sources":["Style.js","components/drag_and_drop/DragAndDropStyles.js","components/create_task/CreateTaskStyle.js","template/style_modal/StyledModalStyle.js","template/style_modal/StyledModal.js","utility.js","components/create_task/CreateTask.js","components/drag_and_drop/DragAndDrop.js","components/profiles/ProfilesStyle.js","components/addnewmember/AddNewMember.js","components/profiles/Profiles.js","reducer.js","App.js","reportWebVitals.js","index.js"],"names":["Profile","styled","div","ImageContainer","Error","Input","input","Button","button","DragAndDropStyles","TaskContainer","TaskCategory","TaskContent","TaskDetail","profile","Task","props","importance","TextInput","textarea","SelectInput","select","NewTask","Icon","i","StyledModal","Modal","setAppElement","StyledModalComponent","isOpen","onRequestClose","contentLabel","children","className","overlayClassName","getName","params","split","toUpperCase","validateCreateTaskForm","CreateTask","team","handleSubmit","initalValuesOfForm","useState","openForm","setOpenForm","formik","useFormik","initialValues","description","subject","assignee","category","validate","onSubmit","useEffect","isSubmitting","resetForm","onClick","htmlFor","id","name","type","required","autoComplete","maxLength","onChange","handleChange","value","values","errors","disabled","map","obj","key","Name","text","color","DragAndDrop","tasks","dispatch","newtasks","onDragOver","ev","preventDefault","onDrop","cat","dataTransfer","getData","newTasks","filter","task","forEach","t","push","onDragStart","e","setData","draggable","todo","working","done","toolTipColor","TeamContainer","FullName","span","ImgContainer","AddNewMember","isDuplicate","isAccessUser","errorJson","regex","RegExp","test","length","validateNewUserForm","Profiles","includes","reducer","state","action","dropDepth","inDropZone","concat","teamName","App","React","useReducer","data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c370df4.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Profile = styled.div`\n    height: 20%;\n    bottom: 0.5rem;\n    position: relative;\n    left: 0.5rem;\n`;\n\nconst ImageContainer = styled.div`\n    border-radius: 50%;\n    height: 2rem;\n    width: 2rem;\n    background-color: blue;\n`;\n\nconst Error = styled.div`\n    color:red;\n    font-size:12px;\n    visibility: hidden;\n    margin: 1rem 0;\n    &.show{\n        visibility: visible!important;\n        margin: 0 0 0.5rem;\n    }\n`;\n\nconst Input = styled.input`\n    margin:1rem 0.5rem;\n    width:65%;\n    border-radius: 1rem;\n    height: 2rem;\n    &:focus{\n        outline:unset;\n    }\n`;\n\n\nconst Button = styled.button`\n    width:100%;\n    background-color: grey;\n    border: 0.1rem solid black;\n    text-align:center;\n    color:white;\n    cursor:pointer;\n    &:focus{\n        outline:unset;\n    }\n`;\n\nexport { Profile,ImageContainer,Button, Input, Error };","import styled from \"styled-components\";\nimport {Profile as profile} from '../../Style';\n\nconst DragAndDropStyles = styled.div`\n    text-align: center;\n    position: relative;\n    top: 7rem;\n`;\n\nconst TaskContainer = styled.div`\n    width:100%; \n    height: 100vh;\n    display: flex;\n`;\n\nconst TaskCategory = styled.div`\n    content: \"\";\n    display: table;\n    clear: both;\n    height: 100vh;\n    width: 33.33%;\n    float:left;\n`;\n\nconst TaskContent = styled.div`\n    display: inline-block;\n    margin: 0;\n    padding: 0;\n    background-color: #e0e0e0;\n    width: 100%;\n`;\n\nconst TaskDetail = styled.div`\n    height: 80%;\n    top: 0;\n    position: relative;\n    line-height: 1.1rem;\n    text-align: justify;\n    margin: 0.5rem;\n    text-overflow: ellipsis;\n`;\n\nconst Profile = styled(profile)`\n    left: 3rem;\n    bottom: 2rem;\n`;\n\nconst Task = styled.div`\n    width: 10rem;\n    height: 10rem;\n    background-color: yellow;\n    margin: 5px auto;\n    line-height: 5em;\n    cursor: pointer;\n    background-color:${props=>props.importance}\n`;\n\nexport {DragAndDropStyles,  TaskContainer, TaskCategory, TaskContent, Task, Profile , TaskDetail};","import styled from 'styled-components';\nimport { Error, Input, Button } from '../../Style';\n\nconst TextInput = styled.textarea`\n    width: 452px; \n    height: 192px;\n    resize: none;\n    border: 0.1rem solid black;\n    border-radius: 1rem;\n    &:focus{\n        outline:unset;\n    }\n`;\nconst SelectInput = styled.select`\n    width:calc(100% - 10rem);\n    border: 0.1rem solid black;\n    border-radius: 1rem;\n    height:2.5rem;\n    &:focus{\n        outline:unset;\n    }\n`;\n\nconst NewTask = styled.div`\n    position: fixed;\n    bottom: 2rem;\n    right: 2rem;\n    width: 4rem;\n    height: 4rem;\n    background-color:black;\n    border-radius:50%;\n    opacity:0.5;\n    color: white;\n    & span{\n        top: 2.1rem;\n        position: absolute;\n        right: 1.1rem;\n        background-color: inherit;\n        font-size: 11px;\n        font-weight: 700;\n    }\n`;\n\nconst Icon = styled.i`\n    cursor:pointer;\n    font-size: 30px;\n    text-align: center;\n    position: absolute;\n    top: 1rem;\n    \n    right: 1.2rem;\n`;\nexport { Error, Input, Button, TextInput, SelectInput, NewTask, Icon };","import styled from \"styled-components\";\nimport Modal from \"react-modal\";\n\nconst StyledModal = styled(Modal)``;\n\nexport {StyledModal};","import React from 'react';\nimport { StyledModal } from './StyledModalStyle';\nimport Modal from \"react-modal\";\n\nStyledModal.setAppElement(\"#root\");\n\nconst StyledModalComponent = ({ isOpen, onRequestClose, contentLabel, children }) => {\n    return (\n        <StyledModal\n            isOpen={isOpen}\n            onRequestClose={onRequestClose}\n            contentLabel={contentLabel}\n            className=\"form-modal\"\n            overlayClassName=\"form-overlay\"\n        >\n            {children}\n        </StyledModal>)\n\n}\n\nexport default StyledModalComponent;","export const getName = params => {\n    if (!params) {\n        return;\n    }\n    return (`${params[0]} ${params.split(\" \")[1] && params.split(\" \")[1][0] || ``}`).toUpperCase();\n}\n\nexport const validateNewUserForm = ({isAccessUser, isDuplicate, ...params}) => {\n    const errorJson = {}\n    const regex = new RegExp(\"^[a-zA-Z0-9\\\\-\\\\s]+$\");\n    if (isAccessUser) {\n        errorJson.name = 'You can create only 10 users';\n    }\n    if (isDuplicate(params.name)) {\n        errorJson.name = 'Name should be unique.';\n    }\n    if (!regex.test(params.name)) {\n        errorJson.name = 'Name should have Alphabets, number & space.';\n    }\n    if (params.name && params.name.length < 3) {\n        errorJson.name = 'Name should be of length greater than 0.';\n    }\n    if (!params.name) {\n        errorJson.name = 'Name is required';\n    }\n    return errorJson;\n}\n\nexport const validateCreateTaskForm = params=>{\n    const errorJson = {};\n    return errorJson;\n}","import React, { useEffect, useState } from 'react';\nimport { useFormik } from 'formik';\nimport { Input, TextInput, SelectInput, Button, Error, NewTask, Icon } from './CreateTaskStyle';\nimport StyledModalComponent from '../../template/style_modal/StyledModal';\nimport { validateCreateTaskForm } from '../../utility';\n\nconst CreateTask = ({ team, initalValuesOfForm, handleSubmit }) => {\n\n    const [openForm, setOpenForm] = useState(false);\n    const initialValuesConstant = {\n        description: '',\n        subject: '',\n        assignee: 'assignee',\n        category: 'todo',\n        importance: 0\n    }\n    const category = [\n        {Name:'To Do', type:\"todo\"},\n        {Name:'Working...', type:\"working\"},\n        {Name:'Done', type:\"done\"}];\n    \n    const priorty = [{text:'High', color:'red'}, \n    {text:'Medium', color:'pink'},\n    {text:'Low', color:'yellow'}];\n\n    const formik = useFormik({\n        initialValues: {...initialValuesConstant},\n        validate: validateCreateTaskForm,\n        onSubmit: params=>{\n            debugger;\n            handleSubmit(params);\n        },\n    });\n\n    useEffect(() => {\n        if (formik.isSubmitting) {\n            formik.resetForm();\n            setOpenForm(false);\n        }\n        return () => formik.resetForm();\n    }, [formik.isSubmitting])\n\n    return (\n        <>\n            <NewTask onClick={()=>setOpenForm(true)}><Icon className=\"far fa-clipboard\"></Icon><span>+</span></NewTask>\n            <StyledModalComponent\n                isOpen={openForm}\n                onRequestClose={() => setOpenForm(!openForm)}\n                contentLabel=\"Create Task\"\n            >\n                <h1>Create Task</h1>\n                <form onSubmit={formik.handleSubmit}>\n                    <p>\n                        <label htmlFor=\"description\">Description: </label>\n                        <TextInput\n                            id=\"description\"\n                            name=\"description\"\n                            type=\"text\"\n                            required\n                            autoComplete=\"off\"\n                            maxLength={50}\n                            onChange={formik.handleChange}\n                            value={formik.values.description} />\n                        <Error className={`${formik.errors.description && `show` || ``}`}>{formik.errors.description}</Error>\n                    </p>\n                    <p>\n                        <label htmlFor=\"subject\">subject: </label>\n                        <Input\n                            id=\"subject\"\n                            name=\"subject\"\n                            type=\"text\"\n                            required\n                            autoComplete=\"off\"\n                            maxLength={20}\n                            onChange={formik.handleChange}\n                            value={formik.values.subject} />\n                        <Error className={`${formik.errors.subject && `show` || ``}`}>{formik.errors.subject}</Error>\n                    </p>\n                    <p>\n                        <label htmlFor=\"assignee\">Assignee: </label>\n                        <SelectInput\n                            id=\"assignee\"\n                            name=\"assignee\"\n                            type=\"text\"\n                            required\n                            autoComplete=\"off\"\n                            onChange={formik.handleChange}\n                            value={formik.values.assignee}>\n                                <option value=\"assignee\" disabled>Select Assignee</option>\n                                {team.map((obj,key)=>\n                                            (<option value={obj} key={`assignee_${key}`}>\n                                                {obj}\n                                            </option>))\n}                            </SelectInput>\n                        <Error className={`${formik.errors.assignee && `show` || ``}`}>{formik.errors.assignee}</Error>\n                    </p>\n                    <p>\n                        <label htmlFor=\"category\">Category: </label>\n                        <SelectInput\n                            id=\"category\"\n                            name=\"category\"\n                            type=\"text\"\n                            required\n                            autoComplete=\"off\"\n                            onChange={formik.handleChange}\n                            value={formik.values.category}>\n                                {category.map((obj,key)=>\n                                    <option key={`cat_${key}`}value={obj.type}>\n                                        {obj.Name}\n                                    </option>)}\n                        </SelectInput>\n                        <Error className={`${formik.errors.category && `show` || ``}`}>{formik.errors.category}</Error>\n                    </p>\n                    <p>\n                        <label htmlFor=\"category\">Priorty: </label>\n                        <SelectInput\n                            id=\"importance\"\n                            name=\"importance\"\n                            type=\"text\"\n                            required\n                            autoComplete=\"off\"\n                            onChange={formik.handleChange}\n                            value={formik.values.importance}>\n                                {priorty.map((obj,key)=><option value={obj.color} key={`priorty_${key}`}>{obj.text}</option>)}\n                        </SelectInput>\n                        <Error className={`${formik.errors.importance && `show` || ``}`}>{formik.errors.importance}</Error>\n                    </p>\n                    <p>\n                        <Button type=\"submit\">Save</Button>\n                    </p>\n                </form>\n\n            </StyledModalComponent>\n        </>)\n}\n\nexport default CreateTask;","import React from \"react\";\nimport {DragAndDropStyles,  TaskContainer, TaskCategory, Task, TaskContent, TaskDetail, Profile} from './DragAndDropStyles';\nimport CreateTask from '../create_task/CreateTask';\nimport {getName} from '../../utility';\n\nconst DragAndDrop = ({tasks=[], dispatch, team}) => {\nconst newtasks = {'working':[],'done':[],'todo':[]};\n  const onDragStart = (ev, id) => {\n    ev.dataTransfer.setData(\"id\", id);\n  };\n\n  const onDragOver = ev => {\n    ev.preventDefault();\n  };\n\n  const handleSubmit = params => dispatch({type: 'CREATE_TASK', task:params})\n\n  const onDrop = (ev, cat) => {\n    let id = ev.dataTransfer.getData(\"id\");\n\n    let newTasks = tasks.filter(task => {\n      if (task.name == id) {\n        task.category = cat;\n      }\n      return task;\n    });\n\n    dispatch({type: 'CREATE_TASK', task:[...newTasks]})\n    \n  };\n    tasks.forEach(t => {\n        newtasks[t.category].push(\n          <Task\n            key={t.name}\n            onDragStart={e => onDragStart(e, t.name)}\n            draggable\n            importance={`${t.importance}`}\n            >\n            <TaskDetail>{t.subject}</TaskDetail>\n            <Profile>\n              {getName(t.assignee)}\n            </Profile>\n        </Task>\n        );\n    });\n\n    return (\n      <DragAndDropStyles>\n          <TaskContainer>\n            <TaskCategory\n              onDragOver={e => onDragOver(e)}\n              onDrop={e => {\n                  onDrop(e, \"todo\");\n              }}\n            >\n            <TaskContent>To Do</TaskContent>\n            {newtasks.todo}\n            </TaskCategory>\n            <TaskCategory\n            onDragOver={e => onDragOver(e)}\n            onDrop={e => {\n                onDrop(e, \"working\");\n            }}\n            >\n            <TaskContent>Working...</TaskContent>\n            {newtasks.working}\n            </TaskCategory>\n            <TaskCategory\n            onDragOver={e => onDragOver(e)}\n            onDrop={e => onDrop(e, \"done\")}\n            >\n            <TaskContent>Done</TaskContent>\n            {newtasks.done}\n            </TaskCategory>\n        </TaskContainer>\n        <CreateTask team={team} handleSubmit={handleSubmit}/>\n      </DragAndDropStyles>\n    );\n}\n\nexport default DragAndDrop;","import styled from \"styled-components\";\nimport { Profile as profile, ImageContainer as ImgContainer } from '../../Style';\n\nconst Profile = styled(profile)``;\nconst toolTipColor = \"#000000a1\";\nconst TeamContainer = styled.div`\n    display: flex;\n    height: 4rem;\n    vertical-align: middle;\n    justify-content: center;\n    position: absolute;\n    width: 100%;\n    margin:2rem auto 0 auto;\n\n`;\nconst FullName = styled.span`\n    visibility: hidden;\n    width: max-content;\n    background-color: ${toolTipColor};\n    color: #fff;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    bottom:0;\n    left:1px;\n    z-index: 1;\n    &:after{\n        content: \" \";\n        position: absolute;\n        top: 115%;\n        left: 36%;\n        margin-top: -5px;\n        border-width: 5px;\n        border-style: solid;\n        border-color: ${toolTipColor} transparent transparent transparent;\n    }\n`;\n\nconst ImageContainer = styled(ImgContainer)`\n        margin: 1rem;\n        padding:0.5rem;\n        text-align: center;\n        &:hover span {\n            visibility: visible;\n        }\n        cursor:pointer;\n        background-color:#888a8c;\n        color:white;\n        span:first-of-type{\n            top: 0.5vw;\n            position: relative;\n            width: 100%;\n            left: 0.1vw;\n        }\n`;\n\nexport { TeamContainer, Profile, FullName, ImageContainer };","import React, { useEffect } from 'react';\nimport { useFormik } from 'formik';\nimport {validateNewUserForm} from '../../utility';\nimport StyledModalComponent from '../../template/style_modal/StyledModal';\nimport { Error, Button, Input } from './AddNewMemberStyle';\n\nconst AddNewMember = ({ isDuplicate, openForm, setOpenForm, isAccessUser, handleSubmit }) => {\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n        },\n        validate: params=>validateNewUserForm({isDuplicate, isAccessUser, ...params}),\n        onSubmit: handleSubmit,\n    });\n\n    useEffect(()=>{\n        if(formik.isSubmitting){\n            formik.resetForm();\n            setOpenForm(false);\n        }\n        return ()=>formik.resetForm();\n    },[formik.isSubmitting])\n\n    return (\n        <StyledModalComponent\n            isOpen={openForm}\n            onRequestClose={() => setOpenForm(!openForm)}\n            contentLabel=\"Add New USer\"\n        >\n            <h1>Create User</h1>\n            <form onSubmit={formik.handleSubmit}>\n                <p>\n                    <label htmlFor=\"name\">Name: </label>\n                    <Input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        required\n                        autoComplete=\"off\"\n                        onChange={formik.handleChange}\n                        value={formik.values.name} />\n                    <Error className={`${formik.errors.name && `show` || ``}`}>{formik.errors.name}</Error>\n                </p>\n                <p>\n                    <Button type=\"submit\">Save</Button>\n                </p>\n            </form>\n\n        </StyledModalComponent>)\n\n}\n\nexport default AddNewMember;","import React,{useState} from 'react';\nimport {Profile, ImageContainer, FullName, TeamContainer} from './ProfilesStyle';\nimport {getName} from '../../utility';\nimport AddNewMember from '../addnewmember/AddNewMember';\n\nconst Profiles = ({team = [], handleSubmit}) => {\n    const [openForm, setOpenForm] = useState();\n    \n    const isDuplicate = params => team.includes(params);\n    return (<TeamContainer>\n        {team.map((obj,key)=>{\n        return (<Profile key={`profile-${key}`}>\n                        <ImageContainer>\n                            <span>{getName(obj)}</span>\n                            <FullName>{obj}</FullName>\n                        </ImageContainer>\n                    </Profile>)\n        })} \n        <Profile key={`profile-new-member`}>\n            <ImageContainer onClick={()=>setOpenForm(!openForm)}>\n                <span>+</span>\n                <FullName>Add new member</FullName>\n            </ImageContainer>\n        </Profile>\n        {(openForm && \n            <AddNewMember \n                isAccessUser={(team.length>=10)} \n                isDuplicate={isDuplicate} \n                handleSubmit={handleSubmit} \n                setOpenForm={setOpenForm} \n                openForm={openForm}/>) || null}\n    </TeamContainer>)        \n    \n}\n\nexport default Profiles;","export const reducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_DROP_DEPTH':\n        return { ...state, dropDepth: action.dropDepth }\n      case 'SET_IN_DROP_ZONE':\n        return { ...state, inDropZone: action.inDropZone };\n      case 'CREATE_TASK':\n        return { ...state, tasks: state.tasks.concat(action.task) };\n      case 'DELETE_TASK':\n        return { ...state, tasks: state.tasks.filter(obj=>obj.subject!=action.task.subject) };\n      case 'ADD_MEMBER':\n        return { ...state, team: state.team.concat(action.teamName) };\n      case 'DELETE_MEMBER':\n          return { ...state, team: state.team.filter(obj=>obj!==action.teamName) };\n      default:\n        return state;\n    }\n}\n  ","import React from 'react';\nimport DragAndDrop from './components/drag_and_drop/DragAndDrop';\nimport Profiles from './components/profiles/Profiles';\n\nimport {reducer} from './reducer';\nimport './App.css';\n\nfunction App() {\n  const tasks = [\n    {description: \"create a task\", subject:\"tasking nklnkln ndnkl nkl nlkllr\", assignee:\"Wca hgfh\", category:'todo', importance:\"yellow\"},\n    {description: \"create a task\", subject:\"tasking\", assignee:\"Tnsajnk bjvbk\", category:'todo', importance:\"yellow\"},\n    {description: \"create a task\",subject:\"tasking\", assignee:\"Zee eee\", category:'working', importance:\"red\"},\n    {description: \"create a task\", subject:\"tasking\", assignee:\"Zinat erfj\", category:'done', importance:\"pink\"},\n  ]\n  const team = [\"Tnsajnk bjvbk\",\n  \"Zinat erfj\",\n  \"Wca hgfh\",\n  \"Zee eee\"]\n\n  const [data, dispatch] = React.useReducer(\n    reducer, { tasks, team }\n  )\n\n  const handleSubmit = params => {\n    debugger;\n    dispatch({type:'ADD_MEMBER',teamName: params.name});\n  }\n\n  return (\n    <>\n      <Profiles dispatch={dispatch} team={data.team} handleSubmit={handleSubmit}/>\n      <DragAndDrop dispatch={dispatch} team={data.team} tasks={data.tasks}/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}